// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Schemas

model Address {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @db.VarChar(255)
  phone     Int
  pincode   Int
  locality  String
  address   String
  city      String
  state     String
  landmark  String?
  work      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  orders    Order[]
}

model Profile {
  id        Int     @id @default(autoincrement())
  firstName String
  lastName  String?
  gender    String?
  phone     String?
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @unique
}

model User {
  id        String    @id
  email     String    @unique
  name      String?
  role      String    @default("user")
  image     String?
  profile   Profile?
  addresses Address[]
  Product   Product[]
  cart      Item[]
  orders    Order[]
}

// Product

model Brand {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Int
  discount    Int      @default(0)
  imageUrl    String
  stock       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // relationships
  brandId    Int
  brand      Brand    @relation(fields: [brandId], references: [id])
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  item       Item[]
  orders     Order[]
}

model Item {
  id        Int     @id @default(autoincrement())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id     Int    @id @default(autoincrement())
  price  Int
  count  Int    @default(1)
  status String @default("pending")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  user      User    @relation(fields: [userId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  addressId Int
  address   Address @relation(fields: [addressId], references: [id])
}
